// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"LinkMe/internal/api"
	"LinkMe/internal/domain/events/post"
	"LinkMe/internal/repository"
	"LinkMe/internal/repository/cache"
	"LinkMe/internal/repository/dao"
	"LinkMe/internal/service"
	"LinkMe/ioc"
	"LinkMe/utils/jwt"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *Cmd {
	db := ioc.InitDB()
	node := ioc.InitializeSnowflakeNode()
	userDAO := dao.NewUserDAO(db, node)
	cmdable := ioc.InitRedis()
	userCache := cache.NewUserCache(cmdable)
	logger := ioc.InitLogger()
	userRepository := repository.NewUserRepository(userDAO, userCache, logger)
	userService := service.NewUserService(userRepository, logger)
	handler := jwt.NewJWTHandler(cmdable)
	userHandler := api.NewUserHandler(userService, handler, logger)
	client := ioc.InitMongoDB()
	postDAO := dao.NewPostDAO(db, logger, client)
	postCache := cache.NewPostCache(cmdable, logger)
	postRepository := repository.NewPostRepository(postDAO, logger, postCache)
	interactiveDAO := dao.NewInteractiveDAO(db, logger)
	interactiveCache := cache.NewInteractiveCache(cmdable)
	interactiveRepository := repository.NewInteractiveRepository(interactiveDAO, logger, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository, logger)
	saramaClient := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(saramaClient)
	producer := post.NewSaramaSyncProducer(syncProducer)
	historyCache := cache.NewHistoryCache(logger, cmdable)
	historyRepository := repository.NewHistoryRepository(logger, historyCache)
	postService := service.NewPostService(postRepository, logger, interactiveService, producer, historyRepository)
	postHandler := api.NewPostHandler(postService, logger, interactiveService)
	historyService := service.NewHistoryService(historyRepository, logger)
	historyHandler := api.NewHistoryHandler(historyService, logger)
	checkDAO := dao.NewCheckDAO(db, logger)
	checkRepository := repository.NewCheckRepository(checkDAO, logger)
	checkService := service.NewCheckService(checkRepository, logger)
	checkHandler := api.NewCheckHandler(checkService, logger)
	enforcer := ioc.InitCasbin(db)
	v := ioc.InitMiddlewares(handler, logger, enforcer)
	engine := ioc.InitWebServer(userHandler, postHandler, historyHandler, checkHandler, v)
	interactiveReadEventConsumer := post.NewInteractiveReadEventConsumer(interactiveRepository, saramaClient, logger)
	consumer := ioc.InitConsumers(interactiveReadEventConsumer)
	cmd := &Cmd{
		server:   engine,
		consumer: consumer,
	}
	return cmd
}
