// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/LinkMe/internal/app/user/repository"
	"github.com/GoSimplicity/LinkMe/internal/app/user/service"
	"github.com/GoSimplicity/LinkMe/internal/interfaces/http/user"
	"github.com/GoSimplicity/LinkMe/internal/pkg/infra/database/dao"
	"github.com/GoSimplicity/LinkMe/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func ProvideApp() (*App, error) {
	db := InitDB()
	logger := InitLogger()
	cmdable := InitRedis()
	handler := jwt.NewJWTHandler(cmdable)
	v := InitMiddlewares(handler, logger)
	userDao := dao.NewUserDao(db)
	userRepository := repository.NewUserRepository(userDao)
	userService := service.NewUserService(userRepository)
	userHandler := user.NewUserHandler(userService)
	engine := InitWebServer(v, userHandler)
	app := &App{
		DB:     db,
		Logger: logger,
		Server: engine,
	}
	return app, nil
}

// wire.go:

type App struct {
	DB     *gorm.DB
	Logger *zap.Logger
	Server *gin.Engine
}

var HandlerSet = wire.NewSet(user.NewUserHandler)

var ServiceSet = wire.NewSet(service.NewUserService)

var RepositorySet = wire.NewSet(repository.NewUserRepository)

var DatabaseSet = wire.NewSet(dao.NewUserDao)

var UtilsSet = wire.NewSet(jwt.NewJWTHandler)

var Injector = wire.NewSet(
	InitLogger,
	InitDB,
	InitMiddlewares,
	InitWebServer,
	InitRedis, wire.Struct(new(App), "*"),
)
