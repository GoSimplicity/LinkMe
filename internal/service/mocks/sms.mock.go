// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sms.go

// Package mocks is a generated GoMock package.

//
//	mockgen -source=internal/service/sms.go -destination=internal/service/mocks/sms.mock.go -package=mocks
//
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSmsService is a mock of SmsService interface.
type MockSmsService struct {
	ctrl     *gomock.Controller
	recorder *MockSmsServiceMockRecorder
}

// MockSmsServiceMockRecorder is the mock recorder for MockSmsService.
type MockSmsServiceMockRecorder struct {
	mock *MockSmsService
}

// NewMockSmsService creates a new mock instance.
func NewMockSmsService(ctrl *gomock.Controller) *MockSmsService {
	mock := &MockSmsService{ctrl: ctrl}
	mock.recorder = &MockSmsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsService) EXPECT() *MockSmsServiceMockRecorder {
	return m.recorder
}

// CheckCode mocks base method.
func (m *MockSmsService) CheckCode(ctx context.Context, smsID, mobile, vCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCode", ctx, smsID, mobile, vCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCode indicates an expected call of CheckCode.
func (mr *MockSmsServiceMockRecorder) CheckCode(ctx, smsID, mobile, vCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCode", reflect.TypeOf((*MockSmsService)(nil).CheckCode), ctx, smsID, mobile, vCode)
}

// SendCode mocks base method.
func (m *MockSmsService) SendCode(ctx context.Context, number string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", ctx, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockSmsServiceMockRecorder) SendCode(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockSmsService)(nil).SendCode), ctx, number)
}
